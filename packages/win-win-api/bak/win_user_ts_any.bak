
import { TsWin32FnsBasic, Pointer } from '../common';

export * from './win_user_struct';
export * from './win_user_type';

export interface User32Fns extends TsWin32FnsBasic {
	ActivateKeyboardLayout: (hkl: any, Flags: any) => any;
	AddClipboardFormatListener: (hwnd: any) => any;
	AdjustWindowRect: (lpRect: any, dwStyle: any, bMenu: any) => any;
	AdjustWindowRectEx: (lpRect: any, dwStyle: any, bMenu: any, dwExStyle: any) => any;
	AdjustWindowRectExForDpi: (lpRect: any, dwStyle: any, bMenu: any, dwExStyle: any, dpi: any) => any;
	AllowSetForegroundWindow: (dwProcessId: any) => any;
	AnimateWindow: (hWnd: any, dwTime: any, dwFlags: any) => any;
	AnyPopup: () => any;
	AppendMenuA: (hMenu: any, uFlags: any, uIDNewItem: any, lpNewItem: any) => any;
	AppendMenuW: (hMenu: any, uFlags: any, uIDNewItem: any, lpNewItem: any) => any;
	AreDpiAwarenessContextsEqual: (dpiContextA: any, dpiContextB: any) => any;
	ArrangeIconicWindows: (hWnd: any) => any;
	AttachThreadInput: (idAttach: any, idAttachTo: any, fAttach: any) => any;
	BeginDeferWindowPos: (nNumWindows: any) => any;
	BeginPaint: (hWnd: any, lpPaint: any) => any;
	BlockInput: (fBlockIt: any) => any;
	BringWindowToTop: (hWnd: any) => any;
	BroadcastSystemMessage: (flags: any, lpInfo: any, Msg: any, wParam: any, lParam: any) => any;
	BroadcastSystemMessageExA: (flags: any, lpInfo: any, Msg: any, wParam: any, lParam: any, pbsmInfo: any) => any;
	BroadcastSystemMessageExW: (flags: any, lpInfo: any, Msg: any, wParam: any, lParam: any, pbsmInfo: any) => any;
	BroadcastSystemMessageW: (flags: any, lpInfo: any, Msg: any, wParam: any, lParam: any) => any;
	CalculatePopupWindowPosition: (anchorPoint: any, windowSize: any, flags: any, excludeRect: any, popupWindowPosition: any) => any;
	CallMsgFilterA: (lpMsg: any, nCode: any) => any;
	CallMsgFilterW: (lpMsg: any, nCode: any) => any;
	CallNextHookEx: (hhk: any, nCode: any, wParam: any, lParam: any) => any;
	CallWindowProcA: (lpPrevWndFunc: any, hWnd: any, Msg: any, wParam: any, lParam: any) => any;
	CallWindowProcW: (lpPrevWndFunc: any, hWnd: any, Msg: any, wParam: any, lParam: any) => any;
	CascadeWindows: (hwndParent: any, wHow: any, lpRect: any, cKids: any, lpKids: any) => any;
	ChangeClipboardChain: (hWndRemove: any, hWndNewNext: any) => any;
	ChangeDisplaySettingsA: (lpDevMode: any, dwFlags: any) => any;
	ChangeDisplaySettingsExA: (lpszDeviceName: any, lpDevMode: any, hwnd: any, dwflags: any, lParam: any) => any;
	ChangeDisplaySettingsExW: (lpszDeviceName: any, lpDevMode: any, hwnd: any, dwflags: any, lParam: any) => any;
	ChangeDisplaySettingsW: (lpDevMode: any, dwFlags: any) => any;
	ChangeWindowMessageFilter: (message: any, dwFlag: any) => any;
	ChangeWindowMessageFilterEx: (hwnd: any, message: any, action: any, pChangeFilterStruct: any) => any;
	CharLowerA: (lpsz: any) => any;
	CharLowerBuffA: (lpsz: any, cchLength: any) => any;
	CharLowerBuffW: (lpsz: any, cchLength: any) => any;
	CharLowerW: (lpsz: any) => any;
	CharNextA: (lpsz: any) => any;
	CharNextExA: (CodePage: any, lpCurrentChar: any, dwFlags: any) => any;
	CharNextW: (lpsz: any) => any;
	CharPrevA: (lpszStart: any, lpszCurrent: any) => any;
	CharPrevExA: (CodePage: any, lpStart: any, lpCurrentChar: any, dwFlags: any) => any;
	CharPrevW: (lpszStart: any, lpszCurrent: any) => any;
	CharToOemA: (pSrc: any, pDst: any) => any;
	CharToOemBuffA: (lpszSrc: any, lpszDst: any, cchDstLength: any) => any;
	CharToOemBuffW: (lpszSrc: any, lpszDst: any, cchDstLength: any) => any;
	CharToOemW: (pSrc: any, pDst: any) => any;
	CharUpperA: (lpsz: any) => any;
	CharUpperBuffA: (lpsz: any, cchLength: any) => any;
	CharUpperBuffW: (lpsz: any, cchLength: any) => any;
	CharUpperW: (lpsz: any) => any;
	CheckDlgButton: (hDlg: any, nIDButton: any, uCheck: any) => any;
	CheckMenuItem: (hMenu: any, uIDCheckItem: any, uCheck: any) => any;
	CheckMenuRadioItem: (hmenu: any, first: any, last: any, check: any, flags: any) => any;
	CheckRadioButton: (hDlg: any, nIDFirstButton: any, nIDLastButton: any, nIDCheckButton: any) => any;
	ChildWindowFromPoint: (hWndParent: any, Point: any) => any;
	ChildWindowFromPointEx: (hwnd: any, pt: any, flags: any) => any;
	ClientToScreen: (hWnd: any, lpPoint: any) => any;
	ClipCursor: (lpRect: any) => any;
	CloseClipboard: () => any;
	CloseDesktop: (hDesktop: any) => any;
	CloseGestureInfoHandle: (hGestureInfo: any) => any;
	CloseTouchInputHandle: (hTouchInput: any) => any;
	CloseWindow: (hWnd: any) => any;
	CloseWindowStation: (hWinSta: any) => any;
	CopyAcceleratorTableA: (hAccelSrc: any, lpAccelDst: any, cAccelEntries: any) => any;
	CopyAcceleratorTableW: (hAccelSrc: any, lpAccelDst: any, cAccelEntries: any) => any;
	CopyCursor: (pcur: any) => any;
	CopyIcon: (hIcon: any) => any;
	CopyImage: (h: any, type: any, cx: any, cy: any, flags: any) => any;
	CopyRect: (lprcDst: any, lprcSrc: any) => any;
	CountClipboardFormats: () => any;
	CreateAcceleratorTableA: (paccel: any, cAccel: any) => any;
	CreateAcceleratorTableW: (paccel: any, cAccel: any) => any;
	CreateCaret: (hWnd: any, hBitmap: any, nWidth: any, nHeight: any) => any;
	CreateCursor: (hInst: any, xHotSpot: any, yHotSpot: any, nWidth: any, nHeight: any, pvANDPlane: any, pvXORPlane: any) => any;
	CreateDesktopA: (lpszDesktop: any, lpszDevice: any, pDevmode: any, dwFlags: any, dwDesiredAccess: any, lpsa: any) => any;
	CreateDesktopExA: (lpszDesktop: any, lpszDevice: any, pDevmode: any, dwFlags: any, dwDesiredAccess: any, lpsa: any, ulHeapSize: any, any: any) => any;
	CreateDesktopExW: (lpszDesktop: any, lpszDevice: any, pDevmode: any, dwFlags: any, dwDesiredAccess: any, lpsa: any, ulHeapSize: any, any: any) => any;
	CreateDesktopW: (lpszDesktop: any, lpszDevice: any, pDevmode: any, dwFlags: any, dwDesiredAccess: any, lpsa: any) => any;
	CreateDialogA: (hInstance: any, lpName: any, hWndParent: any, lpDialogFunc: any) => any;
	CreateDialogIndirectA: (hInstance: any, lpTemplate: any, hWndParent: any, lpDialogFunc: any) => any;
	CreateDialogIndirectParamA: (hInstance: any, lpTemplate: any, hWndParent: any, lpDialogFunc: any, dwInitParam: any) => any;
	CreateDialogIndirectParamW: (hInstance: any, lpTemplate: any, hWndParent: any, lpDialogFunc: any, dwInitParam: any) => any;
	CreateDialogIndirectW: (hInstance: any, lpTemplate: any, hWndParent: any, lpDialogFunc: any) => any;
	CreateDialogParamA: (hInstance: any, lpTemplateName: any, hWndParent: any, lpDialogFunc: any, dwInitParam: any) => any;
	CreateDialogParamW: (hInstance: any, lpTemplateName: any, hWndParent: any, lpDialogFunc: any, dwInitParam: any) => any;
	CreateDialogW: (hInstance: any, lpName: any, hWndParent: any, lpDialogFunc: any) => any;
	CreateIcon: (hInstance: any, nWidth: any, nHeight: any, cPlanes: any, cBitsPixel: any, lpbANDbits: any, lpbXORbits: any) => any;
	CreateIconFromResource: (presbits: any, dwResSize: any, fIcon: any, dwVer: any) => any;
	CreateIconFromResourceEx: (presbits: any, dwResSize: any, fIcon: any, dwVer: any, cxDesired: any, cyDesired: any, Flags: any) => any;
	CreateIconIndirect: (piconinfo: any) => any;
	CreateMDIWindowA: (lpClassName: any, lpWindowName: any, dwStyle: any, X: any, Y: any, nWidth: any, nHeight: any, hWndParent: any, hInstance: any, lParam: any) => any;
	CreateMDIWindowW: (lpClassName: any, lpWindowName: any, dwStyle: any, X: any, Y: any, nWidth: any, nHeight: any, hWndParent: any, hInstance: any, lParam: any) => any;
	CreateMenu: () => any;
	CreatePopupMenu: () => any;
	CreateSyntheticPointerDevice: (pointerType: any, maxCount: any, mode: any) => any;
	CreateWindowA: (lpClassName: any, lpWindowName: any, dwStyle: any, x: any, y: any, nWidth: any, nHeight: any, hWndParent: any, hMenu: any, hInstance: any, lpParam: any) => any;
	CreateWindowExA: (dwExStyle: any, lpClassName: any, lpWindowName: any, dwStyle: any, X: any, Y: any, nWidth: any, nHeight: any, hWndParent: any, hMenu: any, hInstance: any, lpParam: any) => any;
	CreateWindowExW: (dwExStyle: any, lpClassName: any, lpWindowName: any, dwStyle: any, X: any, Y: any, nWidth: any, nHeight: any, hWndParent: any, hMenu: any, hInstance: any, lpParam: any) => any;
	CreateWindowStationA: (lpwinsta: any, dwFlags: any, dwDesiredAccess: any, lpsa: any) => any;
	CreateWindowStationW: (lpwinsta: any, dwFlags: any, dwDesiredAccess: any, lpsa: any) => any;
	CreateWindowW: (lpClassName: any, lpWindowName: any, dwStyle: any, x: any, y: any, nWidth: any, nHeight: any, hWndParent: any, hMenu: any, hInstance: any, lpParam: any) => any;
	DefDlgProcW: (hDlg: any, Msg: any, wParam: any, lParam: any) => any | any;
	DeferWindowPos: (hWinPosInfo: any, hWnd: any, hWndInsertAfter: any, x: any, y: any, cx: any, cy: any, uFlags: any) => any;
	DefFrameProcA: (hWnd: any, hWndMDIClient: any, uMsg: any, wParam: any, lParam: any) => any;
	DefFrameProcW: (hWnd: any, hWndMDIClient: any, uMsg: any, wParam: any, lParam: any) => any;
	DefMDIChildProcA: (hWnd: any, uMsg: any, wParam: any, lParam: any) => any | any;
	DefMDIChildProcW: (hWnd: any, uMsg: any, wParam: any, lParam: any) => any | any;
	DefRawInputProc: (paRawInput: any, nInput: any, cbSizeHeader: any) => any;
	DefWindowProcA: (hWnd: any, Msg: any, wParam: any, lParam: any) => any | any;
	DefWindowProcW: (hWnd: any, Msg: any, wParam: any, lParam: any) => any | any;
	DeleteMenu: (hMenu: any, uPosition: any, uFlags: any) => any;
	DeregisterShellHookWindow: (hwnd: any) => any;
	DestroyAcceleratorTable: (hAccel: any) => any;
	DestroyCaret: () => any;
	DestroyCursor: (hCursor: any) => any;
	DestroyIcon: (hIcon: any) => any;
	DestroyMenu: (hMenu: any) => any;
	DestroySyntheticPointerDevice: (device: any) => any;
	DestroyWindow: (hWnd: any) => any;
	DialogBoxA: (hInstance: any, lpTemplate: any, hWndParent: any, lpDialogFunc: any) => any;
	DialogBoxIndirectA: (hInstance: any, lpTemplate: any, hWndParent: any, lpDialogFunc: any) => any;
	DialogBoxIndirectParamA: (hInstance: any, hDialogTemplate: any, hWndParent: any, lpDialogFunc: any, dwInitParam: any) => any;
	DialogBoxIndirectParamW: (hInstance: any, hDialogTemplate: any, hWndParent: any, lpDialogFunc: any, dwInitParam: any) => any;
	DialogBoxIndirectW: (hInstance: any, lpTemplate: any, hWndParent: any, lpDialogFunc: any) => any;
	DialogBoxParamA: (hInstance: any, lpTemplateName: any, hWndParent: any, lpDialogFunc: any, dwInitParam: any) => any;
	DialogBoxParamW: (hInstance: any, lpTemplateName: any, hWndParent: any, lpDialogFunc: any, dwInitParam: any) => any;
	DialogBoxW: (hInstance: any, lpTemplate: any, hWndParent: any, lpDialogFunc: any) => any;
	DisableProcessWindowsGhosting: () => any;
	DispatchMessage: (lpMsg: any) => any;
	DispatchMessageA: (lpMsg: any) => any;
	DispatchMessageW: (lpMsg: any) => any;
	DisplayConfigGetDeviceInfo: (requestPacket: any) => any;
	DisplayConfigSetDeviceInfo: (setPacket: any) => any;
	DlgDirListA: (hDlg: any, lpPathSpec: any, nIDListBox: any, nIDStaticPath: any, uFileType: any) => any;
	DlgDirListComboBoxA: (hDlg: any, lpPathSpec: any, nIDComboBox: any, nIDStaticPath: any, uFiletype: any) => any;
	DlgDirListComboBoxW: (hDlg: any, lpPathSpec: any, nIDComboBox: any, nIDStaticPath: any, uFiletype: any) => any;
	DlgDirListW: (hDlg: any, lpPathSpec: any, nIDListBox: any, nIDStaticPath: any, uFileType: any) => any;
	DlgDirSelectComboBoxExA: (hwndDlg: any, lpString: any, cchOut: any, idComboBox: any) => any;
	DlgDirSelectComboBoxExW: (hwndDlg: any, lpString: any, cchOut: any, idComboBox: any) => any;
	DlgDirSelectExA: (hwndDlg: any, lpString: any, chCount: any, idListBox: any) => any;
	DlgDirSelectExW: (hwndDlg: any, lpString: any, chCount: any, idListBox: any) => any;
	DragDetect: (hwnd: any, pt: any) => any;
	DrawAnimatedRects: (hwnd: any, idAni: any, lprcFrom: any, lprcTo: any) => any;
	DrawCaption: (hwnd: any, hdc: any, lprect: any, flags: any) => any;
	DrawEdge: (hdc: any, qrc: any, edge: any, grfFlags: any) => any;
	DrawFocusRect: (hDC: any, lprc: any) => any;
	// DrawFrameControl: (: any,: any,: any,: any)=> any;
	DrawIcon: (hDC: any, X: any, Y: any, hIcon: any) => any;
	DrawIconEx: (hdc: any, xLeft: any, yTop: any, hIcon: any, cxWidth: any, cyWidth: any, istepIfAniCur: any, hbrFlickerFreeDraw: any, diFlags: any) => any;
	DrawMenuBar: (hWnd: any) => any;
	DrawStateA: (hdc: any, hbrFore: any, qfnCallBack: any, lData: any, wData: any, x: any, y: any, cx: any, cy: any, uFlags: any) => any;
	DrawStateW: (hdc: any, hbrFore: any, qfnCallBack: any, lData: any, wData: any, x: any, y: any, cx: any, cy: any, uFlags: any) => any;
	DrawText: (hdc: any, lpchText: any, cchText: any, lprc: any, format: any) => any;
	DrawTextA: (hdc: any, lpchText: any, cchText: any, lprc: any, format: any) => any;
	DrawTextExA: (hdc: any, lpchText: any, cchText: any, lprc: any, format: any, lpdtp: any) => any;
	DrawTextExW: (hdc: any, lpchText: any, cchText: any, lprc: any, format: any, lpdtp: any) => any;
	DrawTextW: (hdc: any, lpchText: any, cchText: any, lprc: any, format: any) => any;
	EmptyClipboard: () => any;
	EnableMenuItem: (hMenu: any, uIDEnableItem: any, uEnable: any) => any;
	EnableMouseInPointer: (fEnable: any) => any;
	EnableNonClientDpiScaling: (hwnd: any) => any;
	EnableScrollBar: (hWnd: any, wSBflags: any, wArrows: any) => any;
	EnableWindow: (hWnd: any, bEnable: any) => any;
	EndDeferWindowPos: (hWinPosInfo: any) => any;
	EndDialog: (hDlg: any, nResult: any) => any;
	EndMenu: () => any;
	EndPaint: (hWnd: any, lpPaint: any) => any;
	EndTask: (hWnd: any, fShutDown: any, fForce: any) => any;
	EnumChildWindows: (hWndParent: any, lpEnumFunc: any, lParam: any) => any;
	EnumClipboardFormats: (format: any) => any;
	EnumDesktopsA: (hwinsta: any, lpEnumFunc: any, lParam: any) => any;
	EnumDesktopsW: (hwinsta: any, lpEnumFunc: any, lParam: any) => any;
	EnumDesktopWindows: (hDesktop: any, lpfn: any, lParam: any) => any;
	EnumDisplayDevicesA: (lpDevice: any, iDevNum: any, lpDisplayDevice: any, dwFlags: any) => any;
	EnumDisplayDevicesW: (lpDevice: any, iDevNum: any, lpDisplayDevice: any, dwFlags: any) => any;
	EnumDisplayMonitors: (hdc: any, lprcClip: any, lpfnEnum: any, dwData: any) => any;
	EnumDisplaySettingsA: (lpszDeviceName: any, iModeNum: any, lpDevMode: any) => any;
	EnumDisplaySettingsExA: (lpszDeviceName: any, iModeNum: any, lpDevMode: any, dwFlags: any) => any;
	EnumDisplaySettingsExW: (lpszDeviceName: any, iModeNum: any, lpDevMode: any, dwFlags: any) => any;
	EnumDisplaySettingsW: (lpszDeviceName: any, iModeNum: any, lpDevMode: any) => any;
	EnumPropsA: (hWnd: any, lpEnumFunc: any) => any;
	EnumPropsExA: (hWnd: any, lpEnumFunc: any, lParam: any) => any;
	EnumPropsExW: (hWnd: any, lpEnumFunc: any, lParam: any) => any;
	EnumPropsW: (hWnd: any, lpEnumFunc: any) => any;
	EnumThreadWindows: (dwThreadId: any, lpfn: any, lParam: any) => any;
	EnumWindows: (lpEnumFunc: any, lParam: any) => any;
	EnumWindowStationsA: (lpEnumFunc: any, lParam: any) => any;
	EnumWindowStationsW: (lpEnumFunc: any, lParam: any) => any;
	EqualRect: (lprc1: any, lprc2: any) => any;
	EvaluateProximityToPolygon: (numVertices: any, controlPolygon: any, pHitTestingInput: any, pProximityEval: any) => any;
	EvaluateProximityToRect: (controlBoundingBox: any, pHitTestingInput: any, pProximityEval: any) => any;
	ExcludeUpdateRgn: (hDC: any, hWnd: any) => any;
	ExitWindows: (dwReserved: any, Code: any) => any;
	ExitWindowsEx: (uFlags: any, dwReason: any) => any;
	FillRect: (hDC: any, lprc: any, hbr: any) => any;
	FindWindowA: (lpClassName: any, lpWindowName: any) => any;
	FindWindowExA: (hWndParent: any, hWndChildAfter: any, lpszClass: any, lpszWindow: any) => any;
	FindWindowExW: (hWndParent: any, hWndChildAfter: any, lpszClass: any, lpszWindow: any) => any;
	FindWindowW: (lpClassName: any, lpWindowName: any) => any;
	FlashWindow: (hWnd: any, bInvert: any) => any;
	FlashWindowEx: (pfwi: any) => any;
	FrameRect: (hDC: any, lprc: any, hbr: any) => any;
	GET_APPCOMMAND_LPARAM: (lParam: any) => any;
	GET_DEVICE_LPARAM: (lParam: any) => any;
	GET_FLAGS_LPARAM: (lParam: any) => any;
	GET_KEYSTATE_LPARAM: (lParam: any) => any;
	GET_KEYSTATE_WPARAM: (wParam: any) => any;
	GET_NCHITTEST_WPARAM: (wParam: any) => any;
	GET_POINTERID_WPARAM: (wParam: any) => any;
	GET_RAWINPUT_CODE_WPARAM: (wParam: any) => any;
	GET_WHEEL_DELTA_WPARAM: (wParam: any) => any;
	GET_XBUTTON_WPARAM: (wParam: any) => any;
	GetActiveWindow: () => any;
	GetAltTabInfoA: (hwnd: any, iItem: any, pati: any, pszItemText: any, cchItemText: any) => any;
	GetAltTabInfoW: (hwnd: any, iItem: any, pati: any, pszItemText: any, cchItemText: any) => any;
	GetAncestor: (hwnd: any, gaFlags: any) => any;
	GetAsyncKeyState: (vKey: any) => any;
	GetAutoRotationState: (pState: any) => any;
	GetAwarenessFromDpiAwarenessContext: (value: any) => any;
	GetCapture: () => any;
	GetCaretBlinkTime: () => any;
	GetCaretPos: (lpPoint: any) => any;
	GetCIMSSM: (inputMessageSource: any) => any;
	GetClassInfoA: (hInstance: any, lpClassName: any, lpWndClass: any) => any;
	GetClassInfoExA: (hInstance: any, lpszClass: any, lpwcx: any) => any;
	GetClassInfoExW: (hInstance: any, lpszClass: any, lpwcx: any) => any;
	GetClassInfoW: (hInstance: any, lpClassName: any, lpWndClass: any) => any;
	GetClassLongA: (hWnd: any, nIndex: any) => any;
	GetClassLongPtrA: (hWnd: any, nIndex: any) => any;
	GetClassLongPtrW: (hWnd: any, nIndex: any) => any;
	GetClassLongW: (hWnd: any, nIndex: any) => any;
	GetClassName: (hWnd: any, lpClassName: any, nMaxCount: any) => any;
	GetClassNameA: (hWnd: any, lpClassName: any, nMaxCount: any) => any;
	GetClassNameW: (hWnd: any, lpClassName: any, nMaxCount: any) => any;
	GetClassWord: (hWnd: any, nIndex: any) => any;
	GetClientRect: (hWnd: any, lpRect: any) => any;
	GetClipboardData: (uFormat: any) => any;
	GetClipboardFormatNameA: (format: any, lpszFormatName: any, cchMaxCount: any) => any;
	GetClipboardFormatNameW: (format: any, lpszFormatName: any, cchMaxCount: any) => any;
	GetClipboardOwner: () => any;
	GetClipboardSequenceNumber: () => any;
	GetClipboardViewer: () => any;
	GetClipCursor: (lpRect: any) => any;
	GetComboBoxInfo: (hwndCombo: any, pcbi: any) => any;
	GetCurrentInputMessageSource: (inputMessageSource: any) => any;
	GetCursor: () => any;
	GetCursorInfo: (pci: any) => any;
	GetCursorPos: (lpPoint: any) => any;
	GetDC: (hWnd: any) => any;
	GetDCEx: (hWnd: any, hrgnClip: any, flags: any) => any;
	GetDesktopWindow: () => any;
	GetDialogBaseUnits: () => any;
	GetDialogControlDpiChangeBehavior: (hWnd: any) => any;
	GetDialogDpiChangeBehavior: (hDlg: any) => any;
	GetDisplayAutoRotationPreferences: (pOrientation: any) => any;
	GetDisplayAutoRotationPreferencesByProcessId: (dwProcessId: any, pOrientation: any, fRotateScreen: any) => any;
	GetDisplayConfigBufferSizes: (flags: any, numPathArrayElements: any, numModeInfoArrayElements: any) => any;
	GetDlgCtrlID: (hWnd: any) => any;
	GetDlgItem: (hDlg: any, nIDDlgItem: any) => any;
	GetDlgItemInt: (hDlg: any, nIDDlgItem: any, lpTranslated: any, bSigned: any) => any;
	GetDlgItemTextA: (hDlg: any, nIDDlgItem: any, lpString: any, cchMax: any) => any;
	GetDlgItemTextW: (hDlg: any, nIDDlgItem: any, lpString: any, cchMax: any) => any;
	GetDoubleClickTime: () => any;
	GetDpiForSystem: () => any;
	GetDpiForWindow: (hwnd: any) => any;
	GetDpiFromDpiAwarenessContext: (value: any) => any;
	GetFocus: () => any;
	GetForegroundWindow: () => any;
	GetGestureConfig: (hwnd: any, dwReserved: any, dwFlags: any, pcIDs: any, pGestureConfig: any, cbSize: any) => any;
	GetGestureExtraArgs: (hGestureInfo: any, cbExtraArgs: any, pExtraArgs: any) => any;
	GetGestureInfo: (hGestureInfo: any, pGestureInfo: any) => any;
	GetGuiResources: (hProcess: any, uiFlags: any) => any;
	GetGUIThreadInfo: (idThread: any, pgui: any) => any;
	GetIconInfo: (hIcon: any, piconinfo: any) => any;
	GetIconInfoExA: (hicon: any, piconinfo: any) => any;
	GetIconInfoExW: (hicon: any, piconinfo: any) => any;
	GetInputState: () => any;
	GetKBCodePage: () => any;
	GetKeyboardLayout: (idThread: any) => any;
	GetKeyboardLayoutList: (nBuff: any, lpList: any) => any;
	GetKeyboardLayoutNameA: (pwszKLID: any) => any;
	GetKeyboardLayoutNameW: (pwszKLID: any) => any;
	GetKeyboardState: (lpKeyState: any) => any;
	GetKeyboardType: (nTypeFlag: any) => any;
	GetKeyNameTextA: (lParam: any, lpString: any, cchSize: any) => any;
	GetKeyNameTextW: (lParam: any, lpString: any, cchSize: any) => any;
	GetKeyState: (nVirtKey: any) => any;
	GetLastActivePopup: (hWnd: any) => any;
	GetLastInputInfo: (plii: any) => any;
	GetLayeredWindowAttributes: (hwnd: any, pcrKey: any, pbAlpha: any, pdwFlags: any) => any;
	GetListBoxInfo: (hwnd: any) => any;
	GetMenu: (hWnd: any) => any;
	GetMenuBarInfo: (hwnd: any, idObject: any, idItem: any, pmbi: any) => any;
	GetMenuCheckMarkDimensions: () => any;
	GetMenuContextHelpId: (Arg1: any) => any;
	GetMenuDefaultItem: (hMenu: any, fByPos: any, gmdiFlags: any) => any;
	GetMenuInfo: (arg1: any, arg2: any) => any;
	GetMenuItemCount: (hMenu: any) => any;
	GetMenuItemID: (hMenu: any, nPos: any) => any;
	GetMenuItemInfoA: (hmenu: any, item: any, fByPosition: any, lpmii: any) => any;
	GetMenuItemInfoW: (hmenu: any, item: any, fByPosition: any, lpmii: any) => any;
	GetMenuItemRect: (hWnd: any, hMenu: any, uItem: any, lprcItem: any) => any;
	GetMenuState: (hMenu: any, uId: any, uFlags: any) => any;
	GetMenuStringA: (hMenu: any, uIDItem: any, lpString: any, cchMax: any, flags: any) => any;
	GetMenuStringW: (hMenu: any, uIDItem: any, lpString: any, cchMax: any, flags: any) => any;
	GetMessage: (lpMsg: any, hWnd: any, wMsgFilterMin: any, wMsgFilterMax: any) => any;
	GetMessageA: (lpMsg: any, hWnd: any, wMsgFilterMin: any, wMsgFilterMax: any) => any;
	GetMessageExtraInfo: () => any;
	GetMessagePos: () => any;
	GetMessageTime: () => any;
	GetMessageW: (lpMsg: any, hWnd: any, wMsgFilterMin: any, wMsgFilterMax: any) => any;
	GetMonitorInfoA: (hMonitor: any, lpmi: any) => any;
	GetMonitorInfoW: (hMonitor: any, lpmi: any) => any;
	GetMouseMovePointsEx: (cbSize: any, lppt: any, lpptBuf: any, nBufPoints: any, resolution: any) => any;
	GetNextDlgGroupItem: (hDlg: any, hCtl: any, bPrevious: any) => any;
	GetNextDlgTabItem: (hDlg: any, hCtl: any, bPrevious: any) => any;
	GetNextWindow: (hWnd: any, wCmd: any) => any;
	GetOpenClipboardWindow: () => any;
	GetParent: (hWnd: any) => any;
	GetPhysicalCursorPos: (lpPoint: any) => any;
	GetPointerCursorId: (pointerId: any, cursorId: any) => any;
	GetPointerDevice: (device: any, pointerDevice: any) => any;
	GetPointerDeviceCursors: (device: any, cursorCount: any, deviceCursors: any) => any;
	GetPointerDeviceProperties: (device: any, propertyCount: any, pointerProperties: any) => any;
	GetPointerDeviceRects: (device: any, pointerDeviceRect: any, displayRect: any) => any;
	GetPointerDevices: (deviceCount: any, pointerDevices: any) => any;
	GetPointerFrameInfo: (pointerId: any, pointerCount: any, pointerInfo: any) => any;
	GetPointerFrameInfoHistory: (pointerId: any, entriesCount: any, pointerCount: any, pointerInfo: any) => any;
	GetPointerFramePenInfo: (pointerId: any, pointerCount: any, penInfo: any) => any;
	GetPointerFramePenInfoHistory: (pointerId: any, entriesCount: any, pointerCount: any, penInfo: any) => any;
	GetPointerFrameTouchInfo: (pointerId: any, pointerCount: any, touchInfo: any) => any;
	GetPointerFrameTouchInfoHistory: (pointerId: any, entriesCount: any, pointerCount: any, touchInfo: any) => any;
	GetPointerInfo: (pointerId: any, pointerInfo: any) => any;
	GetPointerInfoHistory: (pointerId: any, entriesCount: any, pointerInfo: any) => any;
	GetPointerInputTransform: (pointerId: any, historyCount: any, inputTransform: any) => any;
	GetPointerPenInfo: (pointerId: any, penInfo: any) => any;
	GetPointerPenInfoHistory: (pointerId: any, entriesCount: any, penInfo: any) => any;
	GetPointerTouchInfo: (pointerId: any, touchInfo: any) => any;
	GetPointerTouchInfoHistory: (pointerId: any, entriesCount: any, touchInfo: any) => any;
	GetPointerType: (pointerId: any, pointerType: any) => any;
	GetPriorityClipboardFormat: (paFormatPriorityList: any, cFormats: any) => any;
	GetProcessDefaultLayout: (pdwDefaultLayout: any) => any;
	GetProcessWindowStation: () => any;
	GetPropA: (hWnd: any, lpString: any) => any;
	GetPropW: (hWnd: any, lpString: any) => any;
	GetQueueStatus: (flags: any) => any;
	GetRawInputBuffer: (pData: any, pcbSize: any, cbSizeHeader: any) => any;
	GetRawInputData: (hRawInput: any, uiCommand: any, pData: any, pcbSize: any, cbSizeHeader: any) => any;
	GetRawInputDeviceInfoA: (hDevice: any, uiCommand: any, pData: any, pcbSize: any) => any;
	GetRawInputDeviceInfoW: (hDevice: any, uiCommand: any, pData: any, pcbSize: any) => any;
	GetRawInputDeviceList: (pRawInputDeviceList: any, puiNumDevices: any, cbSize: any) => any;
	GetRawPointerDeviceData: (pointerId: any, historyCount: any, propertiesCount: any, pProperties: any, pValues: any) => any;
	GetRegisteredRawInputDevices: (pRawInputDevices: any, puiNumDevices: any, cbSize: any) => any;
	GetScrollBarInfo: (hwnd: any, idObject: any, psbi: any) => any;
	GetScrollInfo: (hwnd: any, nBar: any, lpsi: any) => any;
	GetScrollPos: (hWnd: any, nBar: any) => any;
	GetScrollRange: (hWnd: any, nBar: any, lpMinPos: any, lpMaxPos: any) => any;
	GetShellWindow: () => any;
	GetSubMenu: (hMenu: any, nPos: any) => any;
	GetSysColor: (nIndex: any) => any;
	GetSysColorBrush: (nIndex: any) => any;
	GetSystemDpiForProcess: (hProcess: any) => any;
	GetSystemMenu: (hWnd: any, bRevert: any) => any;
	GetSystemMetrics: (nIndex: any) => any;
	GetSystemMetricsForDpi: (nIndex: any, dpi: any) => any;
	GetTabbedTextExtentA: (hdc: any, lpString: any, chCount: any, nTabPositions: any, lpnTabStopPositions: any) => any;
	GetTabbedTextExtentW: (hdc: any, lpString: any, chCount: any, nTabPositions: any, lpnTabStopPositions: any) => any;
	GetThreadDesktop: (dwThreadId: any) => any;
	GetThreadDpiAwarenessContext: () => any;
	GetThreadDpiHostingBehavior: () => any;
	GetTitleBarInfo: (hwnd: any, pti: any) => any;
	GetTopWindow: (hWnd: any) => any;
	GetTouchInputInfo: (hTouchInput: any, cInputs: any, pInputs: any, cbSize: any) => any;
	GetUnpredictedMessagePos: () => any;
	GetUpdatedClipboardFormats: (lpuiFormats: any, cFormats: any, pcFormatsOut: any) => any;
	GetUpdateRect: (hWnd: any, lpRect: any, bErase: any) => any;
	GetUpdateRgn: (hWnd: any, hRgn: any, bErase: any) => any;
	GetUserObjectInformationA: (hObj: any, nIndex: any, pvInfo: any, nLength: any, lpnLengthNeeded: any) => any;
	GetUserObjectInformationW: (hObj: any, nIndex: any, pvInfo: any, nLength: any, lpnLengthNeeded: any) => any;
	GetUserObjectSecurity: (hObj: any, pSIRequested: any, pSID: any, nLength: any, lpnLengthNeeded: any) => any;
	GetWindow: (hWnd: any, uCmd: any) => any;
	GetWindowContextHelpId: (Arg1: any) => any;
	GetWindowDC: (hWnd: any) => any;
	GetWindowDisplayAffinity: (hWnd: any, pdwAffinity: any) => any;
	GetWindowDpiAwarenessContext: (hwnd: any) => any;
	GetWindowDpiHostingBehavior: (hwnd: any) => any;
	GetWindowFeedbackSetting: (hwnd: any, feedback: any, dwFlags: any, pSize: any, config: any) => any;
	GetWindowInfo: (hwnd: any, pwi: any) => any;
	GetWindowLongA: (hWnd: any, nIndex: any) => any;
	GetWindowLongPtrA: (hWnd: any, nIndex: any) => any;
	GetWindowLongPtrW: (hWnd: any, nIndex: any) => any;
	GetWindowLongW: (hWnd: any, nIndex: any) => any;
	GetWindowModuleFileNameA: (hwnd: any, pszFileName: any, cchFileNameMax: any) => any;
	GetWindowModuleFileNameW: (hwnd: any, pszFileName: any, cchFileNameMax: any) => any;
	GetWindowPlacement: (hWnd: any, lpwndpl: any) => any;
	GetWindowRect: (hWnd: any, lpRect: any) => any;
	GetWindowRgn: (hWnd: any, hRgn: any) => any;
	GetWindowRgnBox: (hWnd: any, lprc: any) => any;
	GetWindowTextA: (hWnd: any, lpString: any, nMaxCount: any) => any;
	GetWindowTextLengthA: (hWnd: any) => any;
	GetWindowTextLengthW: (hWnd: any) => any;
	GetWindowTextW: (hWnd: any, lpString: any, nMaxCount: any) => any;
	GetWindowThreadProcessId: (hWnd: any, lpdwProcessId: any) => any;
	GID_ROTATE_ANGLE_FROM_ARGUMENT: (_arg_: any) => any;
	GID_ROTATE_ANGLE_TO_ARGUMENT: (_arg_: any) => any;
	GrayStringA: (hDC: any, hBrush: any, lpOutputFunc: any, lpData: any, nCount: any, X: any, Y: any, nWidth: any, nHeight: any) => any;
	GrayStringW: (hDC: any, hBrush: any, lpOutputFunc: any, lpData: any, nCount: any, X: any, Y: any, nWidth: any, nHeight: any) => any;
	HAS_POINTER_CONFIDENCE_WPARAM: (wParam: any) => any;
	HideCaret: (hWnd: any) => any;
	HiliteMenuItem: (hWnd: any, hMenu: any, uIDHiliteItem: any, uHilite: any) => any;
	InflateRect: (lprc: any, dx: any, dy: any) => any;
	InitializeTouchInjection: (maxCount: any, dwMode: any) => any;
	InjectSyntheticPointerInput: (device: any, pointerInfo: any, count: any) => any;
	InjectTouchInput: (count: any, contacts: any) => any;
	InSendMessage: () => any;
	InSendMessageEx: (lpReserved: any) => any;
	InsertMenuA: (hMenu: any, uPosition: any, uFlags: any, uIDNewItem: any, lpNewItem: any) => any;
	InsertMenuItemA: (hmenu: any, item: any, fByPosition: any, lpmi: any) => any;
	InsertMenuItemW: (hmenu: any, item: any, fByPosition: any, lpmi: any) => any;
	InsertMenuW: (hMenu: any, uPosition: any, uFlags: any, uIDNewItem: any, lpNewItem: any) => any;
	InternalGetWindowText: (hWnd: any, pString: any, cchMaxCount: any) => any;
	IntersectRect: (lprcDst: any, lprcSrc1: any, lprcSrc2: any) => any;
	InvalidateRect: (hWnd: any, lpRect: any, bErase: any) => any;
	InvalidateRgn: (hWnd: any, hRgn: any, bErase: any) => any;
	InvertRect: (hDC: any, lprc: any) => any;
	IS_INTRESOURCE: (_r: Pointer) => any;
	IS_POINTER_CANCELED_WPARAM: (wParam: any) => any;
	IS_POINTER_FIFTHBUTTON_WPARAM: (wParam: any) => any;
	IS_POINTER_FIRSTBUTTON_WPARAM: (wParam: any) => any;
	IS_POINTER_FLAG_SET_WPARAM: (wParam: any, flag: any) => any;
	IS_POINTER_FOURTHBUTTON_WPARAM: (wParam: any) => any;
	IS_POINTER_INCONTACT_WPARAM: (wParam: any) => any;
	IS_POINTER_INRANGE_WPARAM: (wParam: any) => any;
	IS_POINTER_NEW_WPARAM: (wParam: any) => any;
	IS_POINTER_SECONDBUTTON_WPARAM: (wParam: any) => any;
	IS_POINTER_THIRDBUTTON_WPARAM: (wParam: any) => any;
	IsCharAlphaA: (ch: any) => any;
	IsCharAlphaNumericA: (ch: any) => any;
	IsCharAlphaNumericW: (ch: any) => any;
	IsCharAlphaW: (ch: any) => any;
	IsCharLowerA: (ch: any) => any;
	IsCharLowerW: (ch: any) => any;
	IsCharUpperA: (ch: any) => any;
	IsCharUpperW: (ch: any) => any;
	IsChild: (hWndParent: any, hWnd: any) => any;
	IsClipboardFormatAvailable: (format: any) => any;
	IsDialogMessageA: (hDlg: any, lpMsg: any) => any;
	IsDialogMessageW: (hDlg: any, lpMsg: any) => any;
	IsDlgButtonChecked: (hDlg: any, nIDButton: any) => any;
	IsGUIThread: (bConvert: any) => any;
	IsHungAppWindow: (hwnd: any) => any;
	IsIconic: (hWnd: any) => any;
	IsImmersiveProcess: (hProcess: any) => any;
	IsMenu: (hMenu: any) => any;
	IsMouseInPointerEnabled: () => any;
	IsProcessDPIAware: () => any;
	IsRectEmpty: (lprc: any) => any;
	IsTouchWindow: (hwnd: any, pulFlags: any) => any;
	IsValidDpiAwarenessContext: (value: any) => any;
	IsWindow: (hWnd: any) => any;
	IsWindowEnabled: (hWnd: any) => any;
	IsWindowUnicode: (hWnd: any) => any;
	IsWindowVisible: (hWnd: any) => any;
	IsWinEventHookInstalled: (event: any) => any;
	IsWow64Message: () => any;
	IsZoomed: (hWnd: any) => any;
	keybd_event: (bVk: any, bScan: any, dwFlags: any, dwExtraInfo: any) => any;
	KillTimer: (hWnd: any, uIDEvent: any) => any;
	LoadAcceleratorsA: (hInstance: any, lpTableName: any) => any;
	LoadAcceleratorsW: (hInstance: any, lpTableName: any) => any;
	LoadBitmapA: (hInstance: any, lpBitmapName: any) => any;
	LoadBitmapW: (hInstance: any, lpBitmapName: any) => any;
	LoadCursorA: (hInstance: any, lpCursorName: any) => any;
	LoadCursorFromFileA: (lpFileName: any) => any;
	LoadCursorFromFileW: (lpFileName: any) => any;
	LoadCursorW: (hInstance: any, lpCursorName: any) => any;
	LoadIconA: (hInstance: any, lpIconName: any) => any;
	LoadIconW: (hInstance: any, lpIconName: any) => any;
	LoadImageA: (hInst: any, name: any, type: any, cx: any, cy: any, fuLoad: any) => any;
	LoadImageW: (hInst: any, name: any, type: any, cx: any, cy: any, fuLoad: any) => any;
	LoadKeyboardLayoutA: (pwszKLID: any, Flags: any) => any;
	LoadKeyboardLayoutW: (pwszKLID: any, Flags: any) => any;
	LoadMenuA: (hInstance: any, lpMenuName: any) => any;
	LoadMenuIndirectA: (lpMenuTemplate: any) => any;
	LoadMenuIndirectW: (lpMenuTemplate: any) => any;
	LoadMenuW: (hInstance: any, lpMenuName: any) => any;
	LoadStringA: (hInstance: any, uID: any, lpBuffer: any, cchBufferMax: any) => any;
	LoadStringW: (hInstance: any, uID: any, lpBuffer: any, cchBufferMax: any) => any;
	LockSetForegroundWindow: (uLockCode: any) => any;
	LockWindowUpdate: (hWndLock: any) => any;
	LockWorkStation: () => any;
	LogicalToPhysicalPoint: (hWnd: any, lpPoint: any) => any;
	LogicalToPhysicalPointForPerMonitorDPI: (hWnd: any, lpPoint: any) => any;
	LookupIconIdFromDirectory: (presbits: any, fIcon: any) => any;
	LookupIconIdFromDirectoryEx: (presbits: any, fIcon: any, cxDesired: any, cyDesired: any, Flags: any) => any;
	MAKEINTRESOURCEA: (i: any) => any;
	MAKEINTRESOURCEW: (i: any) => any;
	MAKELPARAM: (l: any, h: any) => any;
	MAKELRESULT: (l: any, h: any) => any;
	MAKEWPARAM: (l: any, h: any) => any;
	MapDialogRect: (hDlg: any, lpRect: any) => any;
	MapVirtualKeyA: (uCode: any, uMapType: any) => any;
	MapVirtualKeyExA: (uCode: any, uMapType: any, dwhkl: any) => any;
	MapVirtualKeyExW: (uCode: any, uMapType: any, dwhkl: any) => any;
	MapVirtualKeyW: (uCode: any, uMapType: any) => any;
	MapWindowPoints: (hWndFrom: any, hWndTo: any, lpPoints: any, cPoints: any) => any;
	MenuItemFromPoint: (hWnd: any, hMenu: any, ptScreen: any) => any;
	MessageBeep: (uType: any) => any;
	MessageBox: (hWnd: any, lpText: any, lpCaption: any, uType: any) => any;
	MessageBoxA: (hWnd: any, lpText: any, lpCaption: any, uType: any) => any;
	MessageBoxExA: (hWnd: any, lpText: any, lpCaption: any, uType: any, wLanguageId: any) => any;
	MessageBoxExW: (hWnd: any, lpText: any, lpCaption: any, uType: any, wLanguageId: any) => any;
	MessageBoxIndirectA: (lpmbp: any) => any;
	MessageBoxIndirectW: (lpmbp: any) => any;
	MessageBoxW: (hWnd: any, lpText: any, lpCaption: any, uType: any) => any;
	ModifyMenuA: (hMnu: any, uPosition: any, uFlags: any, uIDNewItem: any, lpNewItem: any) => any;
	ModifyMenuW: (hMnu: any, uPosition: any, uFlags: any, uIDNewItem: any, lpNewItem: any) => any;
	MonitorFromPoint: (pt: any, dwFlags: any) => any;
	MonitorFromRect: (lprc: any, dwFlags: any) => any;
	MonitorFromWindow: (hwnd: any, dwFlags: any) => any;
	mouse_event: (dwFlags: any, dx: any, dy: any, dwData: any, dwExtraInfo: any) => any;
	MoveWindow: (hWnd: any, X: any, Y: any, nWidth: any, nHeight: any, bRepaint: any) => any;
	MsgWaitForMultipleObjects: (nCount: any, pHandles: any, fWaitAll: any, dwMilliseconds: any, dwWakeMask: any) => any;
	MsgWaitForMultipleObjectsEx: (nCount: any, pHandles: any, dwMilliseconds: any, dwWakeMask: any, dwFlags: any) => any;
	NEXTRAWINPUTBLOCK: (ptr: Pointer) => any;
	NotifyWinEvent: (event: any, hwnd: any, idObject: any, idChild: any) => any;
	OemKeyScan: (wOemChar: any) => any;
	OemToCharA: (pSrc: any, pDst: any) => any;
	OemToCharBuffA: (lpszSrc: any, lpszDst: any, cchDstLength: any) => any;
	OemToCharBuffW: (lpszSrc: any, lpszDst: any, cchDstLength: any) => any;
	OemToCharW: (pSrc: any, pDst: any) => any;
	OffsetRect: (lprc: any, dx: any, dy: any) => any;
	OpenClipboard: (hWndNewOwner: any) => any;
	OpenDesktopA: (lpszDesktop: any, dwFlags: any, fInherit: any, dwDesiredAccess: any) => any;
	OpenDesktopW: (lpszDesktop: any, dwFlags: any, fInherit: any, dwDesiredAccess: any) => any;
	OpenIcon: (hWnd: any) => any;
	OpenInputDesktop: (dwFlags: any, fInherit: any, dwDesiredAccess: any) => any;
	OpenWindowStationA: (lpszWinSta: any, fInherit: any, dwDesiredAccess: any) => any;
	OpenWindowStationW: (lpszWinSta: any, fInherit: any, dwDesiredAccess: any) => any;
	PackTouchHitTestingProximityEvaluation: (pHitTestingInput: any, pProximityEval: any) => any;
	PaintDesktop: (hdc: any) => any;
	PeekMessageA: (lpMsg: any, hWnd: any, wMsgFilterMin: any, wMsgFilterMax: any, wRemoveMsg: any) => any;
	PeekMessageW: (lpMsg: any, hWnd: any, wMsgFilterMin: any, wMsgFilterMax: any, wRemoveMsg: any) => any;
	PhysicalToLogicalPoint: (hWnd: any, lpPoint: any) => any;
	PhysicalToLogicalPointForPerMonitorDPI: (hWnd: any, lpPoint: any) => any;
	POINTSTOPOINT: (pt: any, pts: any) => any;
	POINTTOPOINTS: (pt: any) => any;
	PostMessageA: (hWnd: any, Msg: any, wParam: any, lParam: any) => any;
	PostMessageW: (hWnd: any, Msg: any, wParam: any, lParam: any) => any;
	PostQuitMessage: (nExitCode: any) => any;
	PostThreadMessageA: (idThread: any, Msg: any, wParam: any, lParam: any) => any;
	PostThreadMessageW: (idThread: any, Msg: any, wParam: any, lParam: any) => any;
	PrintWindow: (hwnd: any, hdcBlt: any, nFlags: any) => any;
	PrivateExtractIconsA: (szFileName: any, nIconIndex: any, cxIcon: any, cyIcon: any, phicon: any, piconid: any, nIcons: any, flags: any) => any;
	PrivateExtractIconsW: (szFileName: any, nIconIndex: any, cxIcon: any, cyIcon: any, phicon: any, piconid: any, nIcons: any, flags: any) => any;
	PtInRect: (lprc: any, pt: any) => any;
	QueryDisplayConfig: (flags: any, numPathArrayElements: any, pathArray: any, numModeInfoArrayElements: any, modeInfoArray: any, currentTopologyId: any) => any;
	RealChildWindowFromPoint: (hwndParent: any, ptParentClientCoords: any) => any;
	RealGetWindowClassW: (hwnd: any, ptszClassName: any, cchClassNameMax: any) => any;
	RedrawWindow: (hWnd: any, lprcUpdate: any, hrgnUpdate: any, flags: any) => any;
	RegisterClassA: (lpWndClass: any) => any;
	RegisterClassExA: (Arg1: any) => any;
	RegisterClassExW: (Arg1: any) => any;
	RegisterClassW: (lpWndClass: any) => any;
	RegisterClipboardFormatA: (lpszFormat: any) => any;
	RegisterClipboardFormatW: (lpszFormat: any) => any;
	RegisterDeviceNotificationA: (hRecipient: any, NotificationFilter: any, Flags: any) => any;
	RegisterDeviceNotificationW: (hRecipient: any, NotificationFilter: any, Flags: any) => any;
	RegisterHotKey: (hWnd: any, id: any, fsModifiers: any, vk: any) => any;
	RegisterPointerDeviceNotifications: (window: any, notifyRange: any) => any;
	RegisterPointerInputTarget: (hwnd: any, pointerType: any) => any;
	RegisterPointerInputTargetEx: (hwnd: any, pointerType: any, fObserve: any) => any;
	RegisterPowerSettingNotification: (hRecipient: any, PowerSettingGuid: any, Flags: any) => any;
	RegisterRawInputDevices: (pRawInputDevices: any, uiNumDevices: any, cbSize: any) => any;
	RegisterShellHookWindow: (hwnd: any) => any;
	RegisterSuspendResumeNotification: (hRecipient: any, Flags: any) => any;
	RegisterTouchHitTestingWindow: (hwnd: any, value: any) => any;
	RegisterTouchWindow: (hwnd: any, ulFlags: any) => any;
	RegisterWindowMessageA: (lpString: any) => any;
	RegisterWindowMessageW: (lpString: any) => any;
	ReleaseCapture: () => any;
	ReleaseDC: (hWnd: any, hDC: any) => any;
	RemoveClipboardFormatListener: (hwnd: any) => any;
	RemoveMenu: (hMenu: any, uPosition: any, uFlags: any) => any;
	RemovePropA: (hWnd: any, lpString: any) => any;
	RemovePropW: (hWnd: any, lpString: any) => any;
	ReplyMessage: (lResult: any) => any;
	ScreenToClient: (hWnd: any, lpPoint: any) => any;
	ScrollDC: (hDC: any, dx: any, dy: any, lprcScroll: any, lprcClip: any, hrgnUpdate: any, lprcUpdate: any) => any;
	ScrollWindow: (hWnd: any, XAmount: any, YAmount: any, lpRect: any, lpClipRect: any) => any;
	ScrollWindowEx: (hWnd: any, dx: any, dy: any, prcScroll: any, prcClip: any, hrgnUpdate: any, prcUpdate: any, flags: any) => any;
	SendDlgItemMessageA: (hDlg: any, nIDDlgItem: any, Msg: any, wParam: any, lParam: any) => any;
	SendDlgItemMessageW: (hDlg: any, nIDDlgItem: any, Msg: any, wParam: any, lParam: any) => any;
	SendInput: (cInputs: any, pInputs: any, cbSize: any) => any;
	SendMessage: (hWnd: any, Msg: any, wParam: any, lParam: any) => any;
	SendMessageA: (hWnd: any, Msg: any, wParam: any, lParam: any) => any;
	SendMessageCallbackA: (hWnd: any, Msg: any, wParam: any, lParam: any, lpResultCallBack: any, dwData: any) => any;
	SendMessageCallbackW: (hWnd: any, Msg: any, wParam: any, lParam: any, lpResultCallBack: any, dwData: any) => any;
	SendMessageTimeoutA: (hWnd: any, Msg: any, wParam: any, lParam: any, fuFlags: any, uTimeout: any, lpdwResult: any) => any;
	SendMessageTimeoutW: (hWnd: any, Msg: any, wParam: any, lParam: any, fuFlags: any, uTimeout: any, lpdwResult: any) => any;
	SendMessageW: (hWnd: any, Msg: any, wParam: any, lParam: any) => any;
	SendNotifyMessageA: (hWnd: any, Msg: any, wParam: any, lParam: any) => any;
	SendNotifyMessageW: (hWnd: any, Msg: any, wParam: any, lParam: any) => any;
	SetActiveWindow: (hWnd: any) => any;
	SetCapture: (hWnd: any) => any;
	SetCaretBlinkTime: (uMSeconds: any) => any;
	SetCaretPos: (X: any, Y: any) => any;
	SetClassLongA: (hWnd: any, nIndex: any, dwNewLong: any) => any;
	SetClassLongPtrA: (hWnd: any, nIndex: any, dwNewLong: any) => any;
	SetClassLongPtrW: (hWnd: any, nIndex: any, dwNewLong: any) => any;
	SetClassLongW: (hWnd: any, nIndex: any, dwNewLong: any) => any;
	SetClassWord: (hWnd: any, nIndex: any, wNewWord: any) => any;
	SetClipboardData: (uFormat: any, hMem: any) => any;
	SetClipboardViewer: (hWndNewViewer: any) => any;
	SetCoalescableTimer: (hWnd: any, nIDEvent: any, uElapse: any, lpTimerFunc: any, uToleranceDelay: any) => any;
	SetCursor: (hCursor: any) => any;
	SetCursorPos: (X: any, Y: any) => any;
	SetDialogControlDpiChangeBehavior: (hWnd: any, mask: any, values: any) => any;
	SetDialogDpiChangeBehavior: (hDlg: any, mask: any, values: any) => any;
	SetDisplayAutoRotationPreferences: (orientation: any) => any;
	SetDisplayConfig: (numPathArrayElements: any, pathArray: any, numModeInfoArrayElements: any, modeInfoArray: any, flags: any) => any;
	SetDlgItemInt: (hDlg: any, nIDDlgItem: any, uValue: any, bSigned: any) => any;
	SetDlgItemTextA: (hDlg: any, nIDDlgItem: any, lpString: any) => any;
	SetDlgItemTextW: (hDlg: any, nIDDlgItem: any, lpString: any) => any;
	SetDoubleClickTime: (Arg1: any) => any;
	SetFocus: (hWnd: any) => any;
	SetForegroundWindow: (hWnd: any) => any;
	SetGestureConfig: (hwnd: any, dwReserved: any, cIDs: any, pGestureConfig: any, cbSize: any) => any;
	SetKeyboardState: (lpKeyState: any) => any;
	SetLastErrorEx: (dwErrCode: any, dwType: any) => any;
	SetLayeredWindowAttributes: (hwnd: any, crKey: any, bAlpha: any, dwFlags: any) => any;
	SetMenu: (hWnd: any, hMenu: any) => any;
	SetMenuContextHelpId: (arg1: any, arg2: any) => any;
	SetMenuDefaultItem: (hMenu: any, uItem: any, fByPos: any) => any;
	SetMenuInfo: (arg1: any, arg2: any) => any;
	SetMenuItemBitmaps: (hMenu: any, uPosition: any, uFlags: any, hBitmapUnchecked: any, hBitmapChecked: any) => any;
	SetMenuItemInfoA: (hmenu: any, item: any, fByPositon: any, lpmii: any) => any;
	SetMenuItemInfoW: (hmenu: any, item: any, fByPositon: any, lpmii: any) => any;
	SetMessageExtraInfo: (lParam: any) => any;
	SetParent: (hWndChild: any, hWndNewParent: any) => any;
	SetPhysicalCursorPos: (X: any, Y: any) => any;
	SetProcessDefaultLayout: (dwDefaultLayout: any) => any;
	SetProcessDPIAware: () => any;
	SetProcessDpiAwarenessContext: (value: any) => any;
	SetProcessRestrictionExemption: (fEnableExemption: any) => any;
	SetProcessWindowStation: (hWinSta: any) => any;
	SetPropA: (hWnd: any, lpString: any, hData: any) => any;
	SetPropW: (hWnd: any, lpString: any, hData: any) => any;
	SetRect: (lprc: any, xLeft: any, yTop: any, xRight: any, yBottom: any) => any;
	SetRectEmpty: (lprc: any) => any;
	SetScrollInfo: (hwnd: any, nBar: any, lpsi: any, redraw: any) => any;
	SetScrollPos: (hWnd: any, nBar: any, nPos: any, bRedraw: any) => any;
	SetScrollRange: (hWnd: any, nBar: any, nMinPos: any, nMaxPos: any, bRedraw: any) => any;
	SetSysColors: (cElements: any, lpaElements: any, lpaRgbValues: any) => any;
	SetSystemCursor: (hcur: any, id: any) => any;
	SetThreadDesktop: (hDesktop: any) => any;
	SetThreadDpiAwarenessContext: (dpiContext: any) => any;
	SetThreadDpiHostingBehavior: (value: any) => any;
	SetTimer: (hWnd: any, nIDEvent: any, uElapse: any, lpTimerFunc: any) => any;
	SetUserObjectInformationA: (hObj: any, nIndex: any, pvInfo: any, nLength: any) => any;
	SetUserObjectInformationW: (hObj: any, nIndex: any, pvInfo: any, nLength: any) => any;
	SetUserObjectSecurity: (hObj: any, pSIRequested: any, pSID: any) => any;
	SetWindowContextHelpId: (arg1: any, arg2: any) => any;
	SetWindowDisplayAffinity: (hWnd: any, dwAffinity: any) => any;
	SetWindowFeedbackSetting: (hwnd: any, feedback: any, dwFlags: any, size: any, configuration: any) => any;
	SetWindowLongA: (hWnd: any, nIndex: any, dwNewLong: any) => any;
	SetWindowLongPtrA: (hWnd: any, nIndex: any, dwNewLong: any) => any;
	SetWindowLongPtrW: (hWnd: any, nIndex: any, dwNewLong: any) => any;
	SetWindowLongW: (hWnd: any, nIndex: any, dwNewLong: any) => any;
	SetWindowPlacement: (hWnd: any, lpwndpl: any) => any;
	SetWindowPos: (hWnd: any, hWndInsertAfter: any, X: any, Y: any, cx: any, cy: any, uFlags: any) => any;
	SetWindowRgn: (hWnd: any, hRgn: any, bRedraw: any) => any;
	SetWindowsHookExA: (idHook: any, lpfn: any, hmod: any, dwThreadId: any) => any;
	SetWindowsHookExW: (idHook: any, lpfn: any, hmod: any, dwThreadId: any) => any;
	SetWindowTextA: (hWnd: any, lpString: any) => any;
	SetWindowTextW: (hWnd: any, lpString: any) => any;
	SetWinEventHook: (eventMin: any, eventMax: any, hmodWinEventProc: any, pfnWinEventProc: any, idProcess: any, idThread: any, dwFlags: any) => any;
	ShowCaret: (hWnd: any) => any;
	ShowCursor: (bShow: any) => any;
	ShowOwnedPopups: (hWnd: any, fShow: any) => any;
	ShowScrollBar: (hWnd: any, wBar: any, bShow: any) => any;
	ShowWindow: (hWnd: any, nCmdShow: any) => any;
	ShowWindowAsync: (hWnd: any, nCmdShow: any) => any;
	ShutdownBlockReasonCreate: (hWnd: any, pwszReason: any) => any;
	ShutdownBlockReasonDestroy: (hWnd: any) => any;
	ShutdownBlockReasonQuery: (hWnd: any, pwszBuff: any, pcchBuff: any) => any;
	SkipPointerFrameMessages: (pointerId: any) => any;
	SoundSentry: () => any;
	SubtractRect: (lprcDst: any, lprcSrc1: any, lprcSrc2: any) => any;
	SwapMouseButton: (fSwap: any) => any;
	SwitchDesktop: (hDesktop: any) => any;
	SwitchToThisWindow: (hwnd: any, fUnknown: any) => any;
	SystemParametersInfoA: (uiAction: any, uiParam: any, pvParam: any, fWinIni: any) => any;
	SystemParametersInfoForDpi: (uiAction: any, uiParam: any, pvParam: any, fWinIni: any, dpi: any) => any;
	SystemParametersInfoW: (uiAction: any, uiParam: any, pvParam: any, fWinIni: any) => any;
	TabbedTextOutA: (hdc: any, x: any, y: any, lpString: any, chCount: any, nTabPositions: any, lpnTabStopPositions: any, nTabOrigin: any) => any;
	TabbedTextOutW: (hdc: any, x: any, y: any, lpString: any, chCount: any, nTabPositions: any, lpnTabStopPositions: any, nTabOrigin: any) => any;
	TileWindows: (hwndParent: any, wHow: any, lpRect: any, cKids: any, lpKids: any) => any;
	ToAscii: (uVirtKey: any, uScanCode: any, lpKeyState: any, lpChar: any, uFlags: any) => any;
	ToAsciiEx: (uVirtKey: any, uScanCode: any, lpKeyState: any, lpChar: any, uFlags: any, dwhkl: any) => any;
	TOUCH_COORD_TO_PIXEL: (l: any) => any;
	ToUnicode: (wVirtKey: any, wScanCode: any, lpKeyState: any, pwszBuff: any, cchBuff: any, wFlags: any) => any;
	ToUnicodeEx: (wVirtKey: any, wScanCode: any, lpKeyState: any, pwszBuff: any, cchBuff: any, wFlags: any, dwhkl: any) => any;
	TrackMouseEvent: (lpEventTrack: any) => any;
	TrackPopupMenu: (hMenu: any, uFlags: any, x: any, y: any, nReserved: any, hWnd: any, prcRect: any) => any;
	TrackPopupMenuEx: (hMenu: any, uFlags: any, x: any, y: any, hwnd: any, lptpm: any) => any;
	TranslateAcceleratorA: (hWnd: any, hAccTable: any, lpMsg: any) => any;
	TranslateAcceleratorW: (hWnd: any, hAccTable: any, lpMsg: any) => any;
	TranslateMDISysAccel: (hWndClient: any, lpMsg: any) => any;
	TranslateMessage: (lpMsg: any) => any;
	UnhookWindowsHookEx: (hhk: any) => any;
	UnhookWinEvent: (hWinEventHook: any) => any;
	UnionRect: (lprcDst: any, lprcSrc1: any, lprcSrc2: any) => any;
	UnloadKeyboardLayout: (hkl: any) => any;
	UnregisterClassA: (lpClassName: any, hInstance: any) => any;
	UnregisterClassW: (lpClassName: any, hInstance: any) => any;
	UnregisterDeviceNotification: (Handle: any) => any;
	UnregisterHotKey: (hWnd: any, id: any) => any;
	UnregisterPointerInputTarget: (hwnd: any, pointerType: any) => any;
	UnregisterPointerInputTargetEx: (hwnd: any, pointerType: any) => any;
	UnregisterPowerSettingNotification: (Handle: any) => any;
	UnregisterSuspendResumeNotification: (Handle: any) => any;
	UnregisterTouchWindow: (hwnd: any) => any;
	UpdateLayeredWindow: (hWnd: any, hdcDst: any, pptDst: any, psize: any, hdcSrc: any, pptSrc: any, crKey: any, pblend: any, dwFlags: any) => any;
	UpdateWindow: (hWnd: any) => any;
	UserHandleGrantAccess: (hUserHandle: any, hJob: any, bGrant: any) => any;
	ValidateRect: (hWnd: any, lpRect: any) => any;
	ValidateRgn: (hWnd: any, hRgn: any) => any;
	VkKeyScanA: (ch: any) => any;
	VkKeyScanExA: (ch: any, dwhkl: any) => any;
	VkKeyScanExW: (ch: any, dwhkl: any) => any;
	VkKeyScanW: (ch: any) => any;
	WaitForInputIdle: (hProcess: any, dwMilliseconds: any) => any;
	WaitMessage: () => any;
	WindowFromDC: (hDC: any) => any;
	WindowFromPhysicalPoint: (Point: any) => any;
	WindowFromPoint: (Point: any) => any;
	WinHelpA: (hWndMain: any, lpszHelp: any, uCommand: any, dwData: any) => any;
	WinHelpW: (hWndMain: any, lpszHelp: any, uCommand: any, dwData: any) => any;
	// 	wsprintfA: (arg1: any, arg2: any,: ...) => any | WINAPIV;
	// 	wsprintfW: (: any,: any,:...)=> any | WINAPIV;
	// wvsprintfA: (: any,: any, arglist: VA_LIST)=> any;
	// wvsprintfW: (: any,: any, arglist: VA_LIST)=> any;
}